{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Accellarate your python experiments with Lab-Note! Lab-Note is a toolkit for experiments written in python language. It was developped to make your experimental trials recodable and reproducible. Quick Start Install %pip install git+https://github.com/AtsushiHashimoto/lab-note.git How to use? sample code Archive This toolkit archive experiment in a timestamped directory, which consists of... params.yaml (all parameters of the experiment) << script_name>> (main script of the experiment) << modules >> (all imported modules under the main script's directory.) results (all experimental results) memo.txt (optional. A message hard-coded in the experiment.) note.pickle (pickled parameters to reproduce the experiments.) Reproduce the experiment. move to the archive directory, then run the main script. Supported Environment Lab note is currently tested on: Python 3.6.5 Jupyter 5.4.1 (best with token authentification or no authentification.)","title":"Home"},{"location":"#accellarate-your-python-experiments-with-lab-note","text":"Lab-Note is a toolkit for experiments written in python language. It was developped to make your experimental trials recodable and reproducible.","title":"Accellarate your python experiments with Lab-Note!"},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#install","text":"%pip install git+https://github.com/AtsushiHashimoto/lab-note.git","title":"Install"},{"location":"#how-to-use","text":"sample code","title":"How to use?"},{"location":"#archive","text":"This toolkit archive experiment in a timestamped directory, which consists of... params.yaml (all parameters of the experiment) << script_name>> (main script of the experiment) << modules >> (all imported modules under the main script's directory.) results (all experimental results) memo.txt (optional. A message hard-coded in the experiment.) note.pickle (pickled parameters to reproduce the experiments.)","title":"Archive"},{"location":"#reproduce-the-experiment","text":"move to the archive directory, then run the main script.","title":"Reproduce the experiment."},{"location":"#supported-environment","text":"Lab note is currently tested on: Python 3.6.5 Jupyter 5.4.1 (best with token authentification or no authentification.)","title":"Supported Environment"},{"location":"ArgumentParser/","text":"class ArgumentParser [ code ] ArgumentParser is a python/jupyter compatible argument parser. functions The class has constructor, 'add_argument' and 'parse_arg'. The interfaces of all functions are the same with argparse.ArgumentParser. Example: convert your ArgmentParser jupyter-compatible. You need only commenting out built-in argparse, and import labnote.Argumentparser. #from argparse import ArgumentParser # <- comment out! from lab - note import ArgumentParser # <- add this line! parser = ArgumentParser parser . add_argument( 'path_root_src' , \\ action = 'store' , \\ nargs = None, \\ const = None, \\ default = None, \\ type = str, \\ choices = None, \\ help = 'Directory path where your taken photo files are located.' , \\ metavar = None) parser . add_argument( '--param1' , \\ action = 'store' , \\ nargs = None, \\ const = None, \\ default = 1.0 , \\ type = float, \\ choices = None, \\ help = 'A optional parameter.' , \\ metavar = None) params = parser . parse_args() print (params)","title":"ArgumentParser"},{"location":"ArgumentParser/#class-argumentparser","text":"[ code ] ArgumentParser is a python/jupyter compatible argument parser.","title":"class ArgumentParser"},{"location":"ArgumentParser/#functions","text":"The class has constructor, 'add_argument' and 'parse_arg'. The interfaces of all functions are the same with argparse.ArgumentParser.","title":"functions"},{"location":"ArgumentParser/#example-convert-your-argmentparser-jupyter-compatible","text":"You need only commenting out built-in argparse, and import labnote.Argumentparser. #from argparse import ArgumentParser # <- comment out! from lab - note import ArgumentParser # <- add this line! parser = ArgumentParser parser . add_argument( 'path_root_src' , \\ action = 'store' , \\ nargs = None, \\ const = None, \\ default = None, \\ type = str, \\ choices = None, \\ help = 'Directory path where your taken photo files are located.' , \\ metavar = None) parser . add_argument( '--param1' , \\ action = 'store' , \\ nargs = None, \\ const = None, \\ default = 1.0 , \\ type = float, \\ choices = None, \\ help = 'A optional parameter.' , \\ metavar = None) params = parser . parse_args() print (params)","title":"Example: convert your ArgmentParser jupyter-compatible."},{"location":"Note/","text":"class Note [ code ] Note records your experimental parameters, results, and note into a timestamped directly safely. Note.set_params(dict) set parameters related to your experiments. Note.save() save the main script, your original modules, and all parameters to a timestamped directly. The timestamp is generated in the constructor. Note.record() generate a timestamped directory, which is used to store all experimental results at a trial. The timestamp is generated in this function call.","title":"Note"},{"location":"Note/#class-note","text":"[ code ] Note records your experimental parameters, results, and note into a timestamped directly safely.","title":"class Note"},{"location":"Note/#noteset_paramsdict","text":"set parameters related to your experiments.","title":"Note.set_params(dict)"},{"location":"Note/#notesave","text":"save the main script, your original modules, and all parameters to a timestamped directly. The timestamp is generated in the constructor.","title":"Note.save()"},{"location":"Note/#noterecord","text":"generate a timestamped directory, which is used to store all experimental results at a trial. The timestamp is generated in this function call.","title":"Note.record()"}]}