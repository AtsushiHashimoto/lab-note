{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Accellarate your python experiments with Lab-Note! Lab-Note is a toolkit for experiments written in python language. It was developed to make your experimental trials recordable, reproducible, and configurable. Quick Start Install % pip install git+https://github.com/AtsushiHashimoto/lab-note.git How to use? sample code Archive This toolkit archive experiments in a directory with its configuration. The archive consists of... params.yaml (all parameters of the experiment) <<script_name>> (main script of the experiment) <<modules>> (all imported modules under the main script's directory.) <<results>> (all experimental results) memo.txt (optional) Reproduce the experiment. move to the archive directory, and type... % python <<script_name>> Supported Environment Lab note is currently tested on: Python 3.6.5 Jupyter 5.4.1 (best with token authentification or no authentification.)","title":"Home"},{"location":"#accellarate-your-python-experiments-with-lab-note","text":"Lab-Note is a toolkit for experiments written in python language. It was developed to make your experimental trials recordable, reproducible, and configurable.","title":"Accellarate your python experiments with Lab-Note!"},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#install","text":"% pip install git+https://github.com/AtsushiHashimoto/lab-note.git","title":"Install"},{"location":"#how-to-use","text":"sample code","title":"How to use?"},{"location":"#archive","text":"This toolkit archive experiments in a directory with its configuration. The archive consists of... params.yaml (all parameters of the experiment) <<script_name>> (main script of the experiment) <<modules>> (all imported modules under the main script's directory.) <<results>> (all experimental results) memo.txt (optional)","title":"Archive"},{"location":"#reproduce-the-experiment","text":"move to the archive directory, and type... % python <<script_name>>","title":"Reproduce the experiment."},{"location":"#supported-environment","text":"Lab note is currently tested on: Python 3.6.5 Jupyter 5.4.1 (best with token authentification or no authentification.)","title":"Supported Environment"},{"location":"ArgumentParser/","text":"class ArgumentParser [ code ] ArgumentParser is a python/jupyter compatible argument parser. functions The class has constructor, 'add_argument' and 'parse_arg'. The interfaces of all functions are the same with argparse.ArgumentParser. Example: convert your ArgmentParser jupyter-compatible. You need only commenting out built-in argparse, and import labnote.Argumentparser. #from argparse import ArgumentParser # <- comment out! from lab - note import ArgumentParser # <- add this line! parser = ArgumentParser parser . add_argument( 'path_root_src' , \\ action = 'store' , \\ nargs = None , \\ const = None , \\ default = None , \\ type = str , \\ choices = None , \\ help = 'Directory path where your taken photo files are located.' , \\ metavar = None ) parser . add_argument( '--param1' , \\ action = 'store' , \\ nargs = None , \\ const = None , \\ default =1.0 , \\ type = float , \\ choices = None , \\ help = 'A optional parameter.' , \\ metavar = None ) params = parser . parse_args() print (params)","title":"ArgumentParser"},{"location":"ArgumentParser/#class-argumentparser","text":"[ code ] ArgumentParser is a python/jupyter compatible argument parser.","title":"class ArgumentParser"},{"location":"ArgumentParser/#functions","text":"The class has constructor, 'add_argument' and 'parse_arg'. The interfaces of all functions are the same with argparse.ArgumentParser.","title":"functions"},{"location":"ArgumentParser/#example-convert-your-argmentparser-jupyter-compatible","text":"You need only commenting out built-in argparse, and import labnote.Argumentparser. #from argparse import ArgumentParser # <- comment out! from lab - note import ArgumentParser # <- add this line! parser = ArgumentParser parser . add_argument( 'path_root_src' , \\ action = 'store' , \\ nargs = None , \\ const = None , \\ default = None , \\ type = str , \\ choices = None , \\ help = 'Directory path where your taken photo files are located.' , \\ metavar = None ) parser . add_argument( '--param1' , \\ action = 'store' , \\ nargs = None , \\ const = None , \\ default =1.0 , \\ type = float , \\ choices = None , \\ help = 'A optional parameter.' , \\ metavar = None ) params = parser . parse_args() print (params)","title":"Example: convert your ArgmentParser jupyter-compatible."},{"location":"Note/","text":"class Note [ code ] Note records your experimental parameters, results, and note into a timestamped directly safely. Note() Initialize Note class instance. arguments: log_dir, arguments, description, use_subdir, script_name note = Note(log_dir='./outputs',arguments='default_arguments.yaml') log_dir Direct a directory in which all things are archived. arguments (optional) Direct yaml file in which information for argument parser is written. In that, keys are valuable name, and values are arguments passed to parser.add_argument function. This is compatible with jupyter-notebook. N : default : 100 type : int help : '# of samples' alpha : name : - a default : 1.0 type : float help : std . dev . of the first normal distribution beta : name : - b default : 1.0 type : float help : std . dev . of the second normal distribution description (default: None) Comments that explains your code. This will appear in --help usage and memo.txt file in archive. use_subdir (default: False) If use_subdir=True, every execution create archive subdirectory with timestamp. script_name (default: None) You can change archived main script filename. Note.params Access to configures attribute parameters. Let assume the following config file ('argument_settings.yaml') exists. foo : 123 You can access the value of 'foo' by... >>> note = labnote.Note(arguments='argument_settings.yaml') >>> print(note.params.foo) 123 Note.save([memo=str]) save the main script, your original modules, and all parameters to a timestamped directly. The timestamp is generated in the constructor. Note.record() generate a timestamped directory, which is used to store all experimental results at a trial. The timestamp is generated in this function call. with note.record() as rec: with open(rec.getpath('results.txt')) as f: f.write(<<your_precious_result>>)","title":"Note"},{"location":"Note/#class-note","text":"[ code ] Note records your experimental parameters, results, and note into a timestamped directly safely.","title":"class Note"},{"location":"Note/#note","text":"Initialize Note class instance. arguments: log_dir, arguments, description, use_subdir, script_name note = Note(log_dir='./outputs',arguments='default_arguments.yaml')","title":"Note()"},{"location":"Note/#log_dir","text":"Direct a directory in which all things are archived.","title":"log_dir"},{"location":"Note/#arguments-optional","text":"Direct yaml file in which information for argument parser is written. In that, keys are valuable name, and values are arguments passed to parser.add_argument function. This is compatible with jupyter-notebook. N : default : 100 type : int help : '# of samples' alpha : name : - a default : 1.0 type : float help : std . dev . of the first normal distribution beta : name : - b default : 1.0 type : float help : std . dev . of the second normal distribution","title":"arguments (optional)"},{"location":"Note/#description-default-none","text":"Comments that explains your code. This will appear in --help usage and memo.txt file in archive.","title":"description (default: None)"},{"location":"Note/#use_subdir-default-false","text":"If use_subdir=True, every execution create archive subdirectory with timestamp.","title":"use_subdir (default: False)"},{"location":"Note/#script_name-default-none","text":"You can change archived main script filename.","title":"script_name (default: None)"},{"location":"Note/#noteparams","text":"Access to configures attribute parameters. Let assume the following config file ('argument_settings.yaml') exists. foo : 123 You can access the value of 'foo' by... >>> note = labnote.Note(arguments='argument_settings.yaml') >>> print(note.params.foo) 123","title":"Note.params"},{"location":"Note/#notesavememostr","text":"save the main script, your original modules, and all parameters to a timestamped directly. The timestamp is generated in the constructor.","title":"Note.save([memo=str])"},{"location":"Note/#noterecord","text":"generate a timestamped directory, which is used to store all experimental results at a trial. The timestamp is generated in this function call. with note.record() as rec: with open(rec.getpath('results.txt')) as f: f.write(<<your_precious_result>>)","title":"Note.record()"}]}