{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Lab-Note Documentation Lab. Note: The Python Experiment Support Toolkit. Accellarate your python experiments. Lab. Note is a toolkit for experiments written in python language. It was developped to make your experimental trials recodable and reproducible. Read the documentation at lab-note.io . Lab note is tested on: - Python 3.6.5 - Jupyter 5.4.1 (best with token authentification or no authentification.) Getting Start Install %pip install git + https: //github.com/AtsushiHashimoto/lab-note.git How to use? sample code","title":"Home"},{"location":"#welcome-to-lab-note-documentation","text":"Lab. Note: The Python Experiment Support Toolkit.","title":"Welcome to Lab-Note Documentation"},{"location":"#accellarate-your-python-experiments","text":"Lab. Note is a toolkit for experiments written in python language. It was developped to make your experimental trials recodable and reproducible. Read the documentation at lab-note.io . Lab note is tested on: - Python 3.6.5 - Jupyter 5.4.1 (best with token authentification or no authentification.)","title":"Accellarate your python experiments."},{"location":"#getting-start","text":"","title":"Getting Start"},{"location":"#install","text":"%pip install git + https: //github.com/AtsushiHashimoto/lab-note.git","title":"Install"},{"location":"#how-to-use","text":"sample code","title":"How to use?"},{"location":"ArgumentParser/","text":"class ArgumentParser [ code ] ArgumentParser is a python/jupyter compatible argument parser. functions The class has constructor, 'add_argument' and 'parse_arg'. The interfaces of all functions are the same with argparse.ArgumentParser. Example: convert your ArgmentParser jupyter-compatible. You need only commenting out built-in argparse, and import labnote.Argumentparser. #from argparse import ArgumentParser # <- comment out! from lab - note import ArgumentParser # <- add this line! parser = ArgumentParser parser . add_argument( 'path_root_src' , \\ action = 'store' , \\ nargs = None, \\ const = None, \\ default = None, \\ type = str, \\ choices = None, \\ help = 'Directory path where your taken photo files are located.' , \\ metavar = None) parser . add_argument( '--param1' , \\ action = 'store' , \\ nargs = None, \\ const = None, \\ default = 1.0 , \\ type = float, \\ choices = None, \\ help = 'A optional parameter.' , \\ metavar = None) params = parser . parse_args() print (params)","title":"ArgumentParser"},{"location":"ArgumentParser/#class-argumentparser","text":"[ code ] ArgumentParser is a python/jupyter compatible argument parser.","title":"class ArgumentParser"},{"location":"ArgumentParser/#functions","text":"The class has constructor, 'add_argument' and 'parse_arg'. The interfaces of all functions are the same with argparse.ArgumentParser.","title":"functions"},{"location":"ArgumentParser/#example-convert-your-argmentparser-jupyter-compatible","text":"You need only commenting out built-in argparse, and import labnote.Argumentparser. #from argparse import ArgumentParser # <- comment out! from lab - note import ArgumentParser # <- add this line! parser = ArgumentParser parser . add_argument( 'path_root_src' , \\ action = 'store' , \\ nargs = None, \\ const = None, \\ default = None, \\ type = str, \\ choices = None, \\ help = 'Directory path where your taken photo files are located.' , \\ metavar = None) parser . add_argument( '--param1' , \\ action = 'store' , \\ nargs = None, \\ const = None, \\ default = 1.0 , \\ type = float, \\ choices = None, \\ help = 'A optional parameter.' , \\ metavar = None) params = parser . parse_args() print (params)","title":"Example: convert your ArgmentParser jupyter-compatible."},{"location":"Note/","text":"class Note [ code ] Note records your experimental parameters, results, and note into a timestamped directly safely. Note.set_params(dict) set parameters related to your experiments. Note.save() save the main script, your original modules, and all parameters to a timestamped directly. The timestamp is generated in the constructor. Note.record() generate a timestamped directory, which is used to store all experimental results at a trial. The timestamp is generated in this function call.","title":"Note"},{"location":"Note/#class-note","text":"[ code ] Note records your experimental parameters, results, and note into a timestamped directly safely.","title":"class Note"},{"location":"Note/#noteset_paramsdict","text":"set parameters related to your experiments.","title":"Note.set_params(dict)"},{"location":"Note/#notesave","text":"save the main script, your original modules, and all parameters to a timestamped directly. The timestamp is generated in the constructor.","title":"Note.save()"},{"location":"Note/#noterecord","text":"generate a timestamped directory, which is used to store all experimental results at a trial. The timestamp is generated in this function call.","title":"Note.record()"}]}